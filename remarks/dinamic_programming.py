
#점화식으로 재귀함수를 구현 해 보자
def fibo1(x):
    #이렇게 점화식으로 구현하게 되면, x가 커질수록 반복해서 함수를 호출하는 부분이 늘어남
    if x ==1 or x == 2:
        return 1
    return fibo1(x-1) + fibo1(x-2)

#큰문제를 작은 문제로 해결 할 수 있고, 작은 문제에서의 답이 큰 문제에서의 답이라면
#다이나믹 프로그래밍으로 해결 할 수 있다.
#큰문제를 작게 나누고, 같은 문제라면 한번씩 풀어 문제를 효율적으로 해결하는 알고리즘 기법을 '다이나믹 프로그래밍'이라 한다.
d = [0] * 100
def fibo2(x):
    '''
    재귀적으로 수행하다가, 같은 정보가 필요하면 구현한 정답을 그대로 리스트에서 가져오자.
    구한 결과를 메모리 공간에 두고, 필요할때 다시 가져오는 기법을 캐싱 혹은 메모이제이션이라 한다.
    '''
    #종료조건(1 혹은 2일때 1을 반환)
    if x==1 or x ==2:
        return 1
    #이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    d[x] = fibo2(x-1) + fibo2(x-2)

    return


